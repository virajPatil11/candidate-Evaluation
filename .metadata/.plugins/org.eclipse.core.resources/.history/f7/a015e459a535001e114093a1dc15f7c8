package com.snm.candidateevaluationapplication.controller;

import java.io.IOException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.snm.candidateevaluationapplication.model.Feedback;
import com.snm.candidateevaluationapplication.report.ExcelReportGenerator;
import com.snm.candidateevaluationapplication.services.ReportService;

@Controller
@RequestMapping(value = "/report")
public class ReportController {
	
	@Autowired
	ReportService reportService;
	
	@Autowired
	ExcelReportGenerator excelReportGenerator;
	
	/*
	 * Report by level start
	 */	
	@RequestMapping(value = "/generateReortByLevel/{feedbackScreeningLevel}")
	public ResponseEntity<ByteArrayResource> generateReportByLevel(@PathVariable String feedbackScreeningLevel) throws IOException {
		List<Feedback> feedbacks  = reportService.findByLevel(feedbackScreeningLevel);
		
		// Generate the Excel report
        byte[] excelFile = excelReportGenerator.generateReportByLevel(feedbacks, feedbackScreeningLevel);
        
        // Set the response headers to indicate that it's a file download
        HttpHeaders headers = new HttpHeaders();
        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
        headers.setContentDispositionFormData("attachment", "candidate_evaluation_report_by_level_" + feedbackScreeningLevel + ".xlsx");
        
     // Create a Resource from the generated byte array
        ByteArrayResource resource = new ByteArrayResource(excelFile);
        
     // Return the response entity with the file and headers
        return ResponseEntity.ok()
        		.headers(headers)
                .body(resource);
        
//		excelReportGenerator.generateReportByLevel(evaliations, level);
	}
	/*
	 * Report by level end
	 */	
	
	
	/*
	 * Report by evaluator start
	 */	
	@RequestMapping("/generateReportByEvaluator")
    public void generateReportByEvaluator(@RequestParam("empName") String evaluator) throws IOException {
        List<Feedback> evaluations = reportService.findByEvaluator(evaluator);
        excelReportGenerator.generateReportByEvaluator(evaluations, evaluator);
    }
	/*
	 * Report by evaluator end
	 */	
	
	
	/*
	 * Report by feedback status start 
	 */
	@RequestMapping("/generateReportByStatus/{feedbackStatus}")
    public ResponseEntity<ByteArrayResource> generateReportByStatus(@PathVariable String feedbackStatus) throws IOException {
		List<Feedback> feedbacks  = reportService.findByFeedbackStatus(feedbackStatus);
				
				// Generate the Excel report
		        byte[] excelFile = excelReportGenerator.generateReportByStatus(feedbacks, feedbackStatus);
		        
		        // Set the response headers to indicate that it's a file download
		        HttpHeaders headers = new HttpHeaders();
		        headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);
		        headers.setContentDispositionFormData("attachment", "candidate_evaluation_report_by_feedback_status_" + feedbackStatus + ".xlsx");
		        
		     // Create a Resource from the generated byte array
		        ByteArrayResource resource = new ByteArrayResource(excelFile);
		        
		     // Return the response entity with the file and headers
		        return ResponseEntity.ok()
		        		.headers(headers)
		                .body(resource);
		        
		//		excelReportGenerator.generateReportByLevel(evaliations, level);
		    }
	
	/*
	 * Report by feedback status end 
	 */	
	
	
	
	

}
